import _ from 'lodash';
import type { ADBOptions, ADBExecutable } from './types';
import type { Logcat } from './logcat';
import type { LogcatOpts, StringRecord } from './tools/types';
import type { LRUCache } from 'lru-cache';
import * as generalMethods from './tools/adb-commands';
import * as manifestMethods from './tools/android-manifest';
import * as systemCallMethods from './tools/system-calls';
import * as apkSigningMethods from './tools/apk-signing';
import * as apkUtilsMethods from './tools/apk-utils';
import * as apksUtilsMethods from './tools/apks-utils';
import * as aabUtilsMethods from './tools/aab-utils';
import * as emuMethods from './tools/adb-emu-commands';
import * as lockManagementCommands from './tools/lockmgmt';
import * as keyboardCommands from './tools/keyboard-commands';
import * as deviceSettingsCommands from './tools/device-settings';
export declare const DEFAULT_ADB_PORT = 5037;
export declare const DEFAULT_OPTS: {
    readonly sdkRoot: string | undefined;
    readonly executable: {
        readonly path: "adb";
        readonly defaultArgs: readonly [];
    };
    readonly tmpDir: string;
    readonly binaries: {};
    readonly adbPort: 5037;
    readonly adbExecTimeout: 20000;
    readonly remoteAppsCacheLimit: 10;
    readonly allowOfflineDevices: false;
    readonly allowDelayAdb: true;
};
export declare class ADB implements ADBOptions {
    adbHost?: string;
    adbPort?: number;
    _apiLevel: number | undefined;
    _logcatStartupParams: LogcatOpts | undefined;
    _doesPsSupportAOption: boolean | undefined;
    _isPgrepAvailable: boolean | undefined;
    _canPgrepUseFullCmdLineSearch: boolean | undefined;
    _isPidofAvailable: boolean | undefined;
    _memoizedFeatures: (() => Promise<string>) | undefined;
    _areExtendedLsOptionsSupported: boolean | undefined;
    remoteAppsCache: LRUCache<string, string> | undefined;
    _isLockManagementSupported: boolean | undefined;
    sdkRoot?: string;
    udid?: string;
    appDeviceReadyTimeout?: number;
    useKeystore?: boolean;
    keystorePath?: string;
    keystorePassword?: string;
    keyAlias?: string;
    keyPassword?: string;
    executable: ADBExecutable;
    tmpDir?: string;
    curDeviceId?: string;
    emulatorPort?: number;
    logcat?: Logcat;
    binaries?: StringRecord;
    suppressKillServer?: boolean;
    adbExecTimeout?: number;
    remoteAppsCacheLimit?: number;
    buildToolsVersion?: string;
    allowOfflineDevices?: boolean;
    allowDelayAdb?: boolean;
    remoteAdbHost?: string;
    remoteAdbPort?: number;
    clearDeviceLogsOnStart?: boolean;
    constructor(opts?: ADBOptions);
    /**
     * Create a new instance of `ADB` that inherits configuration from this `ADB` instance.
     * This avoids the need to call `ADB.createADB()` multiple times.
     * @param opts - Additional options mapping to pass to the `ADB` constructor.
     * @returns The resulting class instance.
     */
    clone(opts?: ADBOptions): ADB;
    static createADB(opts?: ADBOptions): Promise<ADB>;
    shellChunks: typeof generalMethods.shellChunks;
    getAdbWithCorrectAdbPath: typeof generalMethods.getAdbWithCorrectAdbPath;
    initAapt: typeof generalMethods.initAapt;
    initAapt2: typeof generalMethods.initAapt2;
    initZipAlign: typeof generalMethods.initZipAlign;
    initBundletool: typeof generalMethods.initBundletool;
    getApiLevel: typeof generalMethods.getApiLevel;
    isDeviceConnected: typeof generalMethods.isDeviceConnected;
    mkdir: typeof generalMethods.mkdir;
    isValidClass: typeof generalMethods.isValidClass;
    resolveLaunchableActivity: typeof generalMethods.resolveLaunchableActivity;
    forceStop: typeof generalMethods.forceStop;
    killPackage: typeof generalMethods.killPackage;
    clear: typeof generalMethods.clear;
    grantAllPermissions: typeof generalMethods.grantAllPermissions;
    grantPermissions: typeof generalMethods.grantPermissions;
    grantPermission: typeof generalMethods.grantPermission;
    revokePermission: typeof generalMethods.revokePermission;
    getGrantedPermissions: typeof generalMethods.getGrantedPermissions;
    getDeniedPermissions: typeof generalMethods.getDeniedPermissions;
    getReqPermissions: typeof generalMethods.getReqPermissions;
    stopAndClear: typeof generalMethods.stopAndClear;
    clearTextField: typeof generalMethods.clearTextField;
    lock: typeof generalMethods.lock;
    back: typeof generalMethods.back;
    goToHome: typeof generalMethods.goToHome;
    getAdbPath: typeof generalMethods.getAdbPath;
    sendTelnetCommand: typeof generalMethods.sendTelnetCommand;
    rimraf: typeof generalMethods.rimraf;
    push: typeof generalMethods.push;
    pull: typeof generalMethods.pull;
    processExists: typeof generalMethods.processExists;
    getForwardList: typeof generalMethods.getForwardList;
    forwardPort: typeof generalMethods.forwardPort;
    removePortForward: typeof generalMethods.removePortForward;
    getReverseList: typeof generalMethods.getReverseList;
    reversePort: typeof generalMethods.reversePort;
    removePortReverse: typeof generalMethods.removePortReverse;
    forwardAbstractPort: typeof generalMethods.forwardAbstractPort;
    ping: typeof generalMethods.ping;
    restart: typeof generalMethods.restart;
    startLogcat: typeof generalMethods.startLogcat;
    stopLogcat: typeof generalMethods.stopLogcat;
    getLogcatLogs: typeof generalMethods.getLogcatLogs;
    setLogcatListener: typeof generalMethods.setLogcatListener;
    removeLogcatListener: typeof generalMethods.removeLogcatListener;
    listProcessStatus: typeof generalMethods.listProcessStatus;
    getNameByPid: typeof generalMethods.getNameByPid;
    getPIDsByName: typeof generalMethods.getPIDsByName;
    killProcessesByName: typeof generalMethods.killProcessesByName;
    killProcessByPID: typeof generalMethods.killProcessByPID;
    broadcastProcessEnd: typeof generalMethods.broadcastProcessEnd;
    broadcast: typeof generalMethods.broadcast;
    bugreport: typeof generalMethods.bugreport;
    screenrecord: typeof generalMethods.screenrecord;
    listFeatures: typeof generalMethods.listFeatures;
    isStreamedInstallSupported: typeof generalMethods.isStreamedInstallSupported;
    isIncrementalInstallSupported: typeof generalMethods.isIncrementalInstallSupported;
    takeScreenshot: typeof generalMethods.takeScreenshot;
    listPorts: typeof generalMethods.listPorts;
    executeApksigner: typeof apkSigningMethods.executeApksigner;
    signWithDefaultCert: typeof apkSigningMethods.signWithDefaultCert;
    signWithCustomCert: typeof apkSigningMethods.signWithCustomCert;
    sign: typeof apkSigningMethods.sign;
    zipAlignApk: typeof apkSigningMethods.zipAlignApk;
    checkApkCert: typeof apkSigningMethods.checkApkCert;
    getKeystoreHash: typeof apkSigningMethods.getKeystoreHash;
    APP_INSTALL_STATE: StringRecord<import("./tools/types").InstallState>;
    isAppInstalled: typeof apkUtilsMethods.isAppInstalled;
    startUri: typeof apkUtilsMethods.startUri;
    startApp: typeof apkUtilsMethods.startApp;
    dumpWindows: typeof apkUtilsMethods.dumpWindows;
    getFocusedPackageAndActivity: typeof apkUtilsMethods.getFocusedPackageAndActivity;
    waitForActivityOrNot: typeof apkUtilsMethods.waitForActivityOrNot;
    waitForActivity: typeof apkUtilsMethods.waitForActivity;
    waitForNotActivity: typeof apkUtilsMethods.waitForNotActivity;
    uninstallApk: typeof apkUtilsMethods.uninstallApk;
    installFromDevicePath: typeof apkUtilsMethods.installFromDevicePath;
    cacheApk: typeof apkUtilsMethods.cacheApk;
    install: typeof apkUtilsMethods.install;
    getApplicationInstallState: typeof apkUtilsMethods.getApplicationInstallState;
    installOrUpgrade: typeof apkUtilsMethods.installOrUpgrade;
    extractStringsFromApk: typeof apkUtilsMethods.extractStringsFromApk;
    getApkInfo: typeof apkUtilsMethods.getApkInfo;
    getPackageInfo: typeof apkUtilsMethods.getPackageInfo;
    pullApk: typeof apkUtilsMethods.pullApk;
    activateApp: typeof apkUtilsMethods.activateApp;
    hideKeyboard: typeof keyboardCommands.hideKeyboard;
    isSoftKeyboardPresent: typeof keyboardCommands.isSoftKeyboardPresent;
    keyevent: typeof keyboardCommands.keyevent;
    availableIMEs: typeof keyboardCommands.availableIMEs;
    enabledIMEs: typeof keyboardCommands.enabledIMEs;
    enableIME: typeof keyboardCommands.enableIME;
    disableIME: typeof keyboardCommands.disableIME;
    setIME: typeof keyboardCommands.setIME;
    defaultIME: typeof keyboardCommands.defaultIME;
    inputText: typeof keyboardCommands.inputText;
    runInImeContext: typeof keyboardCommands.runInImeContext;
    isLockManagementSupported: typeof lockManagementCommands.isLockManagementSupported;
    verifyLockCredential: typeof lockManagementCommands.verifyLockCredential;
    clearLockCredential: typeof lockManagementCommands.clearLockCredential;
    isLockEnabled: typeof lockManagementCommands.isLockEnabled;
    setLockCredential: typeof lockManagementCommands.setLockCredential;
    isScreenLocked: typeof lockManagementCommands.isScreenLocked;
    dismissKeyguard: typeof lockManagementCommands.dismissKeyguard;
    cycleWakeUp: typeof lockManagementCommands.cycleWakeUp;
    getSdkBinaryPath: typeof systemCallMethods.getSdkBinaryPath;
    getBinaryNameForOS: ((binaryName: string) => string) & _.MemoizedFunction;
    getBinaryFromSdkRoot: typeof systemCallMethods.getBinaryFromSdkRoot;
    getBinaryFromPath: typeof systemCallMethods.getBinaryFromPath;
    getConnectedDevices: typeof systemCallMethods.getConnectedDevices;
    getDevicesWithRetry: typeof systemCallMethods.getDevicesWithRetry;
    reconnect: typeof systemCallMethods.reconnect;
    restartAdb: typeof systemCallMethods.restartAdb;
    killServer: typeof systemCallMethods.killServer;
    resetTelnetAuthToken: (() => Promise<boolean>) & _.MemoizedFunction;
    adbExecEmu: typeof systemCallMethods.adbExecEmu;
    EXEC_OUTPUT_FORMAT: {
        STDOUT: "stdout";
        FULL: "full";
    };
    adbExec: typeof systemCallMethods.adbExec;
    shell: typeof systemCallMethods.shell;
    createSubProcess: typeof systemCallMethods.createSubProcess;
    getAdbServerPort: typeof systemCallMethods.getAdbServerPort;
    getEmulatorPort: typeof systemCallMethods.getEmulatorPort;
    getPortFromEmulatorString: typeof systemCallMethods.getPortFromEmulatorString;
    getConnectedEmulators: typeof systemCallMethods.getConnectedEmulators;
    setEmulatorPort: typeof systemCallMethods.setEmulatorPort;
    setDeviceId: typeof systemCallMethods.setDeviceId;
    setDevice: typeof systemCallMethods.setDevice;
    getRunningAVD: typeof systemCallMethods.getRunningAVD;
    getRunningAVDWithRetry: typeof systemCallMethods.getRunningAVDWithRetry;
    killAllEmulators: typeof systemCallMethods.killAllEmulators;
    killEmulator: typeof systemCallMethods.killEmulator;
    launchAVD: typeof systemCallMethods.launchAVD;
    getVersion: (() => Promise<{
        binary: {
            version: import("semver").SemVer | null;
            build: number;
        };
        bridge: {
            version: import("semver").SemVer | null;
        };
    }>) & _.MemoizedFunction;
    waitForEmulatorReady: typeof systemCallMethods.waitForEmulatorReady;
    waitForDevice: typeof systemCallMethods.waitForDevice;
    reboot: typeof systemCallMethods.reboot;
    changeUserPrivileges: typeof systemCallMethods.changeUserPrivileges;
    root: typeof systemCallMethods.root;
    unroot: typeof systemCallMethods.unroot;
    isRoot: typeof systemCallMethods.isRoot;
    fileExists: typeof systemCallMethods.fileExists;
    ls: typeof systemCallMethods.ls;
    fileSize: typeof systemCallMethods.fileSize;
    installMitmCertificate: typeof systemCallMethods.installMitmCertificate;
    isMitmCertificateInstalled: typeof systemCallMethods.isMitmCertificateInstalled;
    execBundletool: typeof apksUtilsMethods.execBundletool;
    getDeviceSpec: typeof apksUtilsMethods.getDeviceSpec;
    installMultipleApks: typeof apksUtilsMethods.installMultipleApks;
    installApks: typeof apksUtilsMethods.installApks;
    extractBaseApk: typeof apksUtilsMethods.extractBaseApk;
    extractLanguageApk: typeof apksUtilsMethods.extractLanguageApk;
    isTestPackageOnlyError: typeof apksUtilsMethods.isTestPackageOnlyError;
    packageAndLaunchActivityFromManifest: typeof manifestMethods.packageAndLaunchActivityFromManifest;
    targetSdkVersionFromManifest: typeof manifestMethods.targetSdkVersionFromManifest;
    targetSdkVersionUsingPKG: typeof manifestMethods.targetSdkVersionUsingPKG;
    compileManifest: typeof manifestMethods.compileManifest;
    insertManifest: typeof manifestMethods.insertManifest;
    hasInternetPermissionFromManifest: typeof manifestMethods.hasInternetPermissionFromManifest;
    extractUniversalApk: typeof aabUtilsMethods.extractUniversalApk;
    isEmulatorConnected: typeof emuMethods.isEmulatorConnected;
    verifyEmulatorConnected: typeof emuMethods.verifyEmulatorConnected;
    fingerprint: typeof emuMethods.fingerprint;
    rotate: typeof emuMethods.rotate;
    powerAC: typeof emuMethods.powerAC;
    sensorSet: typeof emuMethods.sensorSet;
    powerCapacity: typeof emuMethods.powerCapacity;
    powerOFF: typeof emuMethods.powerOFF;
    sendSMS: typeof emuMethods.sendSMS;
    gsmCall: typeof emuMethods.gsmCall;
    gsmSignal: typeof emuMethods.gsmSignal;
    gsmVoice: typeof emuMethods.gsmVoice;
    networkSpeed: typeof emuMethods.networkSpeed;
    execEmuConsoleCommand: typeof emuMethods.execEmuConsoleCommand;
    getEmuVersionInfo: typeof emuMethods.getEmuVersionInfo;
    getEmuImageProperties: typeof emuMethods.getEmuImageProperties;
    checkAvdExist: typeof emuMethods.checkAvdExist;
    readonly POWER_AC_STATES: {
        readonly POWER_AC_ON: "on";
        readonly POWER_AC_OFF: "off";
    };
    readonly GSM_CALL_ACTIONS: {
        readonly GSM_CALL: "call";
        readonly GSM_ACCEPT: "accept";
        readonly GSM_CANCEL: "cancel";
        readonly GSM_HOLD: "hold";
    };
    readonly GSM_VOICE_STATES: {
        readonly GSM_VOICE_UNREGISTERED: "unregistered";
        readonly GSM_VOICE_HOME: "home";
        readonly GSM_VOICE_ROAMING: "roaming";
        readonly GSM_VOICE_SEARCHING: "searching";
        readonly GSM_VOICE_DENIED: "denied";
        readonly GSM_VOICE_OFF: "off";
        readonly GSM_VOICE_ON: "on";
    };
    readonly GSM_SIGNAL_STRENGTHS: readonly [0, 1, 2, 3, 4];
    readonly NETWORK_SPEED: {
        readonly GSM: "gsm";
        readonly SCSD: "scsd";
        readonly GPRS: "gprs";
        readonly EDGE: "edge";
        readonly UMTS: "umts";
        readonly HSDPA: "hsdpa";
        readonly LTE: "lte";
        readonly EVDO: "evdo";
        readonly FULL: "full";
    };
    readonly SENSORS: {
        readonly ACCELERATION: "acceleration";
        readonly GYROSCOPE: "gyroscope";
        readonly MAGNETIC_FIELD: "magnetic-field";
        readonly ORIENTATION: "orientation";
        readonly TEMPERATURE: "temperature";
        readonly PROXIMITY: "proximity";
        readonly LIGHT: "light";
        readonly PRESSURE: "pressure";
        readonly HUMIDITY: "humidity";
        readonly MAGNETIC_FIELD_UNCALIBRATED: "magnetic-field-uncalibrated";
        readonly GYROSCOPE_UNCALIBRATED: "gyroscope-uncalibrated";
        readonly HINGE_ANGLE0: "hinge-angle0";
        readonly HINGE_ANGLE1: "hinge-angle1";
        readonly HINGE_ANGLE2: "hinge-angle2";
        readonly HEART_RATE: "heart-rate";
        readonly RGBC_LIGHT: "rgbc-light";
    };
    getDeviceProperty: typeof deviceSettingsCommands.getDeviceProperty;
    setDeviceProperty: typeof deviceSettingsCommands.setDeviceProperty;
    getDeviceSysLanguage: typeof deviceSettingsCommands.getDeviceSysLanguage;
    getDeviceSysCountry: typeof deviceSettingsCommands.getDeviceSysCountry;
    getDeviceSysLocale: typeof deviceSettingsCommands.getDeviceSysLocale;
    getDeviceProductLanguage: typeof deviceSettingsCommands.getDeviceProductLanguage;
    getDeviceProductCountry: typeof deviceSettingsCommands.getDeviceProductCountry;
    getDeviceProductLocale: typeof deviceSettingsCommands.getDeviceProductLocale;
    getModel: typeof deviceSettingsCommands.getModel;
    getManufacturer: typeof deviceSettingsCommands.getManufacturer;
    getScreenSize: typeof deviceSettingsCommands.getScreenSize;
    getScreenDensity: typeof deviceSettingsCommands.getScreenDensity;
    setHttpProxy: typeof deviceSettingsCommands.setHttpProxy;
    deleteHttpProxy: typeof deviceSettingsCommands.deleteHttpProxy;
    setSetting: typeof deviceSettingsCommands.setSetting;
    getSetting: typeof deviceSettingsCommands.getSetting;
    getTimeZone: typeof deviceSettingsCommands.getTimeZone;
    getPlatformVersion: typeof deviceSettingsCommands.getPlatformVersion;
    getLocationProviders: typeof deviceSettingsCommands.getLocationProviders;
    toggleGPSLocationProvider: typeof deviceSettingsCommands.toggleGPSLocationProvider;
    setHiddenApiPolicy: typeof deviceSettingsCommands.setHiddenApiPolicy;
    setDefaultHiddenApiPolicy: typeof deviceSettingsCommands.setDefaultHiddenApiPolicy;
    getDeviceLanguage: typeof deviceSettingsCommands.getDeviceLanguage;
    getDeviceCountry: typeof deviceSettingsCommands.getDeviceCountry;
    getDeviceLocale: typeof deviceSettingsCommands.getDeviceLocale;
    ensureCurrentLocale: typeof deviceSettingsCommands.ensureCurrentLocale;
    setWifiState: typeof deviceSettingsCommands.setWifiState;
    setDataState: typeof deviceSettingsCommands.setDataState;
    getDeviceIdleWhitelist: typeof deviceSettingsCommands.getDeviceIdleWhitelist;
    addToDeviceIdleWhitelist: typeof deviceSettingsCommands.addToDeviceIdleWhitelist;
    isAirplaneModeOn: typeof deviceSettingsCommands.isAirplaneModeOn;
    setAirplaneMode: typeof deviceSettingsCommands.setAirplaneMode;
    setBluetoothOn: typeof deviceSettingsCommands.setBluetoothOn;
    setNfcOn: typeof deviceSettingsCommands.setNfcOn;
    broadcastAirplaneMode: typeof deviceSettingsCommands.broadcastAirplaneMode;
    isWifiOn: typeof deviceSettingsCommands.isWifiOn;
    isDataOn: typeof deviceSettingsCommands.isDataOn;
    isAnimationOn: typeof deviceSettingsCommands.isAnimationOn;
    setAnimationScale: typeof deviceSettingsCommands.setAnimationScale;
    getScreenOrientation: typeof deviceSettingsCommands.getScreenOrientation;
}
//# sourceMappingURL=adb.d.ts.map