"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ADB = exports.DEFAULT_OPTS = exports.DEFAULT_ADB_PORT = void 0;
const lodash_1 = __importDefault(require("lodash"));
const node_os_1 = __importDefault(require("node:os"));
const helpers_1 = require("./helpers");
const logger_1 = __importDefault(require("./logger"));
const generalMethods = __importStar(require("./tools/adb-commands"));
const manifestMethods = __importStar(require("./tools/android-manifest"));
const systemCallMethods = __importStar(require("./tools/system-calls"));
const apkSigningMethods = __importStar(require("./tools/apk-signing"));
const apkUtilsMethods = __importStar(require("./tools/apk-utils"));
const apksUtilsMethods = __importStar(require("./tools/apks-utils"));
const aabUtilsMethods = __importStar(require("./tools/aab-utils"));
const emuMethods = __importStar(require("./tools/adb-emu-commands"));
const lockManagementCommands = __importStar(require("./tools/lockmgmt"));
const keyboardCommands = __importStar(require("./tools/keyboard-commands"));
const emuConstants = __importStar(require("./tools/emu-constants"));
const deviceSettingsCommands = __importStar(require("./tools/device-settings"));
exports.DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_OPTS = {
    sdkRoot: (0, helpers_1.getSdkRootFromEnv)(),
    executable: { path: 'adb', defaultArgs: [] },
    tmpDir: node_os_1.default.tmpdir(),
    binaries: {},
    adbPort: exports.DEFAULT_ADB_PORT,
    adbExecTimeout: helpers_1.DEFAULT_ADB_EXEC_TIMEOUT,
    remoteAppsCacheLimit: 10,
    allowOfflineDevices: false,
    allowDelayAdb: true,
};
class ADB {
    constructor(opts = {}) {
        // TODO: Group methods from general to corresponding modules
        this.shellChunks = generalMethods.shellChunks;
        this.getAdbWithCorrectAdbPath = generalMethods.getAdbWithCorrectAdbPath;
        this.initAapt = generalMethods.initAapt;
        this.initAapt2 = generalMethods.initAapt2;
        this.initZipAlign = generalMethods.initZipAlign;
        this.initBundletool = generalMethods.initBundletool;
        this.getApiLevel = generalMethods.getApiLevel;
        this.isDeviceConnected = generalMethods.isDeviceConnected;
        this.mkdir = generalMethods.mkdir;
        this.isValidClass = generalMethods.isValidClass;
        this.resolveLaunchableActivity = generalMethods.resolveLaunchableActivity;
        this.forceStop = generalMethods.forceStop;
        this.killPackage = generalMethods.killPackage;
        this.clear = generalMethods.clear;
        this.grantAllPermissions = generalMethods.grantAllPermissions;
        this.grantPermissions = generalMethods.grantPermissions;
        this.grantPermission = generalMethods.grantPermission;
        this.revokePermission = generalMethods.revokePermission;
        this.getGrantedPermissions = generalMethods.getGrantedPermissions;
        this.getDeniedPermissions = generalMethods.getDeniedPermissions;
        this.getReqPermissions = generalMethods.getReqPermissions;
        this.stopAndClear = generalMethods.stopAndClear;
        this.clearTextField = generalMethods.clearTextField;
        this.lock = generalMethods.lock;
        this.back = generalMethods.back;
        this.goToHome = generalMethods.goToHome;
        this.getAdbPath = generalMethods.getAdbPath;
        this.sendTelnetCommand = generalMethods.sendTelnetCommand;
        this.rimraf = generalMethods.rimraf;
        this.push = generalMethods.push;
        this.pull = generalMethods.pull;
        this.processExists = generalMethods.processExists;
        this.getForwardList = generalMethods.getForwardList;
        this.forwardPort = generalMethods.forwardPort;
        this.removePortForward = generalMethods.removePortForward;
        this.getReverseList = generalMethods.getReverseList;
        this.reversePort = generalMethods.reversePort;
        this.removePortReverse = generalMethods.removePortReverse;
        this.forwardAbstractPort = generalMethods.forwardAbstractPort;
        this.ping = generalMethods.ping;
        this.restart = generalMethods.restart;
        this.startLogcat = generalMethods.startLogcat;
        this.stopLogcat = generalMethods.stopLogcat;
        this.getLogcatLogs = generalMethods.getLogcatLogs;
        this.setLogcatListener = generalMethods.setLogcatListener;
        this.removeLogcatListener = generalMethods.removeLogcatListener;
        this.listProcessStatus = generalMethods.listProcessStatus;
        this.getNameByPid = generalMethods.getNameByPid;
        this.getPIDsByName = generalMethods.getPIDsByName;
        this.killProcessesByName = generalMethods.killProcessesByName;
        this.killProcessByPID = generalMethods.killProcessByPID;
        this.broadcastProcessEnd = generalMethods.broadcastProcessEnd;
        this.broadcast = generalMethods.broadcast;
        this.bugreport = generalMethods.bugreport;
        this.screenrecord = generalMethods.screenrecord;
        this.listFeatures = generalMethods.listFeatures;
        this.isStreamedInstallSupported = generalMethods.isStreamedInstallSupported;
        this.isIncrementalInstallSupported = generalMethods.isIncrementalInstallSupported;
        this.takeScreenshot = generalMethods.takeScreenshot;
        this.listPorts = generalMethods.listPorts;
        this.executeApksigner = apkSigningMethods.executeApksigner;
        this.signWithDefaultCert = apkSigningMethods.signWithDefaultCert;
        this.signWithCustomCert = apkSigningMethods.signWithCustomCert;
        this.sign = apkSigningMethods.sign;
        this.zipAlignApk = apkSigningMethods.zipAlignApk;
        this.checkApkCert = apkSigningMethods.checkApkCert;
        this.getKeystoreHash = apkSigningMethods.getKeystoreHash;
        this.APP_INSTALL_STATE = apkUtilsMethods.APP_INSTALL_STATE;
        this.isAppInstalled = apkUtilsMethods.isAppInstalled;
        this.startUri = apkUtilsMethods.startUri;
        this.startApp = apkUtilsMethods.startApp;
        this.dumpWindows = apkUtilsMethods.dumpWindows;
        this.getFocusedPackageAndActivity = apkUtilsMethods.getFocusedPackageAndActivity;
        this.waitForActivityOrNot = apkUtilsMethods.waitForActivityOrNot;
        this.waitForActivity = apkUtilsMethods.waitForActivity;
        this.waitForNotActivity = apkUtilsMethods.waitForNotActivity;
        this.uninstallApk = apkUtilsMethods.uninstallApk;
        this.installFromDevicePath = apkUtilsMethods.installFromDevicePath;
        this.cacheApk = apkUtilsMethods.cacheApk;
        this.install = apkUtilsMethods.install;
        this.getApplicationInstallState = apkUtilsMethods.getApplicationInstallState;
        this.installOrUpgrade = apkUtilsMethods.installOrUpgrade;
        this.extractStringsFromApk = apkUtilsMethods.extractStringsFromApk;
        this.getApkInfo = apkUtilsMethods.getApkInfo;
        this.getPackageInfo = apkUtilsMethods.getPackageInfo;
        this.pullApk = apkUtilsMethods.pullApk;
        this.activateApp = apkUtilsMethods.activateApp;
        this.hideKeyboard = keyboardCommands.hideKeyboard;
        this.isSoftKeyboardPresent = keyboardCommands.isSoftKeyboardPresent;
        this.keyevent = keyboardCommands.keyevent;
        this.availableIMEs = keyboardCommands.availableIMEs;
        this.enabledIMEs = keyboardCommands.enabledIMEs;
        this.enableIME = keyboardCommands.enableIME;
        this.disableIME = keyboardCommands.disableIME;
        this.setIME = keyboardCommands.setIME;
        this.defaultIME = keyboardCommands.defaultIME;
        this.inputText = keyboardCommands.inputText;
        this.runInImeContext = keyboardCommands.runInImeContext;
        this.isLockManagementSupported = lockManagementCommands.isLockManagementSupported;
        this.verifyLockCredential = lockManagementCommands.verifyLockCredential;
        this.clearLockCredential = lockManagementCommands.clearLockCredential;
        this.isLockEnabled = lockManagementCommands.isLockEnabled;
        this.setLockCredential = lockManagementCommands.setLockCredential;
        this.isScreenLocked = lockManagementCommands.isScreenLocked;
        this.dismissKeyguard = lockManagementCommands.dismissKeyguard;
        this.cycleWakeUp = lockManagementCommands.cycleWakeUp;
        this.getSdkBinaryPath = systemCallMethods.getSdkBinaryPath;
        this.getBinaryNameForOS = systemCallMethods.getBinaryNameForOS;
        this.getBinaryFromSdkRoot = systemCallMethods.getBinaryFromSdkRoot;
        this.getBinaryFromPath = systemCallMethods.getBinaryFromPath;
        this.getConnectedDevices = systemCallMethods.getConnectedDevices;
        this.getDevicesWithRetry = systemCallMethods.getDevicesWithRetry;
        this.reconnect = systemCallMethods.reconnect;
        this.restartAdb = systemCallMethods.restartAdb;
        this.killServer = systemCallMethods.killServer;
        this.resetTelnetAuthToken = systemCallMethods.resetTelnetAuthToken;
        this.adbExecEmu = systemCallMethods.adbExecEmu;
        this.EXEC_OUTPUT_FORMAT = systemCallMethods.EXEC_OUTPUT_FORMAT;
        this.adbExec = systemCallMethods.adbExec;
        this.shell = systemCallMethods.shell;
        this.createSubProcess = systemCallMethods.createSubProcess;
        this.getAdbServerPort = systemCallMethods.getAdbServerPort;
        this.getEmulatorPort = systemCallMethods.getEmulatorPort;
        this.getPortFromEmulatorString = systemCallMethods.getPortFromEmulatorString;
        this.getConnectedEmulators = systemCallMethods.getConnectedEmulators;
        this.setEmulatorPort = systemCallMethods.setEmulatorPort;
        this.setDeviceId = systemCallMethods.setDeviceId;
        this.setDevice = systemCallMethods.setDevice;
        this.getRunningAVD = systemCallMethods.getRunningAVD;
        this.getRunningAVDWithRetry = systemCallMethods.getRunningAVDWithRetry;
        this.killAllEmulators = systemCallMethods.killAllEmulators;
        this.killEmulator = systemCallMethods.killEmulator;
        this.launchAVD = systemCallMethods.launchAVD;
        this.getVersion = systemCallMethods.getVersion;
        this.waitForEmulatorReady = systemCallMethods.waitForEmulatorReady;
        this.waitForDevice = systemCallMethods.waitForDevice;
        this.reboot = systemCallMethods.reboot;
        this.changeUserPrivileges = systemCallMethods.changeUserPrivileges;
        this.root = systemCallMethods.root;
        this.unroot = systemCallMethods.unroot;
        this.isRoot = systemCallMethods.isRoot;
        this.fileExists = systemCallMethods.fileExists;
        this.ls = systemCallMethods.ls;
        this.fileSize = systemCallMethods.fileSize;
        this.installMitmCertificate = systemCallMethods.installMitmCertificate;
        this.isMitmCertificateInstalled = systemCallMethods.isMitmCertificateInstalled;
        this.execBundletool = apksUtilsMethods.execBundletool;
        this.getDeviceSpec = apksUtilsMethods.getDeviceSpec;
        this.installMultipleApks = apksUtilsMethods.installMultipleApks;
        this.installApks = apksUtilsMethods.installApks;
        this.extractBaseApk = apksUtilsMethods.extractBaseApk;
        this.extractLanguageApk = apksUtilsMethods.extractLanguageApk;
        this.isTestPackageOnlyError = apksUtilsMethods.isTestPackageOnlyError;
        this.packageAndLaunchActivityFromManifest = manifestMethods.packageAndLaunchActivityFromManifest;
        this.targetSdkVersionFromManifest = manifestMethods.targetSdkVersionFromManifest;
        this.targetSdkVersionUsingPKG = manifestMethods.targetSdkVersionUsingPKG;
        this.compileManifest = manifestMethods.compileManifest;
        this.insertManifest = manifestMethods.insertManifest;
        this.hasInternetPermissionFromManifest = manifestMethods.hasInternetPermissionFromManifest;
        this.extractUniversalApk = aabUtilsMethods.extractUniversalApk;
        this.isEmulatorConnected = emuMethods.isEmulatorConnected;
        this.verifyEmulatorConnected = emuMethods.verifyEmulatorConnected;
        this.fingerprint = emuMethods.fingerprint;
        this.rotate = emuMethods.rotate;
        this.powerAC = emuMethods.powerAC;
        this.sensorSet = emuMethods.sensorSet;
        this.powerCapacity = emuMethods.powerCapacity;
        this.powerOFF = emuMethods.powerOFF;
        this.sendSMS = emuMethods.sendSMS;
        this.gsmCall = emuMethods.gsmCall;
        this.gsmSignal = emuMethods.gsmSignal;
        this.gsmVoice = emuMethods.gsmVoice;
        this.networkSpeed = emuMethods.networkSpeed;
        this.execEmuConsoleCommand = emuMethods.execEmuConsoleCommand;
        this.getEmuVersionInfo = emuMethods.getEmuVersionInfo;
        this.getEmuImageProperties = emuMethods.getEmuImageProperties;
        this.checkAvdExist = emuMethods.checkAvdExist;
        this.POWER_AC_STATES = emuConstants.POWER_AC_STATES;
        this.GSM_CALL_ACTIONS = emuConstants.GSM_CALL_ACTIONS;
        this.GSM_VOICE_STATES = emuConstants.GSM_VOICE_STATES;
        this.GSM_SIGNAL_STRENGTHS = emuConstants.GSM_SIGNAL_STRENGTHS;
        this.NETWORK_SPEED = emuConstants.NETWORK_SPEED;
        this.SENSORS = emuConstants.SENSORS;
        this.getDeviceProperty = deviceSettingsCommands.getDeviceProperty;
        this.setDeviceProperty = deviceSettingsCommands.setDeviceProperty;
        this.getDeviceSysLanguage = deviceSettingsCommands.getDeviceSysLanguage;
        this.getDeviceSysCountry = deviceSettingsCommands.getDeviceSysCountry;
        this.getDeviceSysLocale = deviceSettingsCommands.getDeviceSysLocale;
        this.getDeviceProductLanguage = deviceSettingsCommands.getDeviceProductLanguage;
        this.getDeviceProductCountry = deviceSettingsCommands.getDeviceProductCountry;
        this.getDeviceProductLocale = deviceSettingsCommands.getDeviceProductLocale;
        this.getModel = deviceSettingsCommands.getModel;
        this.getManufacturer = deviceSettingsCommands.getManufacturer;
        this.getScreenSize = deviceSettingsCommands.getScreenSize;
        this.getScreenDensity = deviceSettingsCommands.getScreenDensity;
        this.setHttpProxy = deviceSettingsCommands.setHttpProxy;
        this.deleteHttpProxy = deviceSettingsCommands.deleteHttpProxy;
        this.setSetting = deviceSettingsCommands.setSetting;
        this.getSetting = deviceSettingsCommands.getSetting;
        this.getTimeZone = deviceSettingsCommands.getTimeZone;
        this.getPlatformVersion = deviceSettingsCommands.getPlatformVersion;
        this.getLocationProviders = deviceSettingsCommands.getLocationProviders;
        this.toggleGPSLocationProvider = deviceSettingsCommands.toggleGPSLocationProvider;
        this.setHiddenApiPolicy = deviceSettingsCommands.setHiddenApiPolicy;
        this.setDefaultHiddenApiPolicy = deviceSettingsCommands.setDefaultHiddenApiPolicy;
        this.getDeviceLanguage = deviceSettingsCommands.getDeviceLanguage;
        this.getDeviceCountry = deviceSettingsCommands.getDeviceCountry;
        this.getDeviceLocale = deviceSettingsCommands.getDeviceLocale;
        this.ensureCurrentLocale = deviceSettingsCommands.ensureCurrentLocale;
        this.setWifiState = deviceSettingsCommands.setWifiState;
        this.setDataState = deviceSettingsCommands.setDataState;
        this.getDeviceIdleWhitelist = deviceSettingsCommands.getDeviceIdleWhitelist;
        this.addToDeviceIdleWhitelist = deviceSettingsCommands.addToDeviceIdleWhitelist;
        this.isAirplaneModeOn = deviceSettingsCommands.isAirplaneModeOn;
        this.setAirplaneMode = deviceSettingsCommands.setAirplaneMode;
        this.setBluetoothOn = deviceSettingsCommands.setBluetoothOn;
        this.setNfcOn = deviceSettingsCommands.setNfcOn;
        this.broadcastAirplaneMode = deviceSettingsCommands.broadcastAirplaneMode;
        this.isWifiOn = deviceSettingsCommands.isWifiOn;
        this.isDataOn = deviceSettingsCommands.isDataOn;
        this.isAnimationOn = deviceSettingsCommands.isAnimationOn;
        this.setAnimationScale = deviceSettingsCommands.setAnimationScale;
        this.getScreenOrientation = deviceSettingsCommands.getScreenOrientation;
        const options = lodash_1.default.defaultsDeep(opts, lodash_1.default.cloneDeep(exports.DEFAULT_OPTS));
        lodash_1.default.defaultsDeep(this, options);
        // The above defaultsDeep call guarantees the 'executable' field to be always assigned
        this.executable = options.executable;
        if (options.remoteAdbHost) {
            this.executable.defaultArgs.push('-H', options.remoteAdbHost);
            this.adbHost = options.remoteAdbHost;
        }
        // TODO figure out why we have this option as it does not appear to be
        // used anywhere. Probably deprecate in favor of simple opts.adbPort
        if (options.remoteAdbPort) {
            this.adbPort = options.remoteAdbPort;
        }
        this.executable.defaultArgs.push('-P', String(this.adbPort));
        if (options.udid) {
            this.setDeviceId(options.udid);
        }
    }
    /**
     * Create a new instance of `ADB` that inherits configuration from this `ADB` instance.
     * This avoids the need to call `ADB.createADB()` multiple times.
     * @param opts - Additional options mapping to pass to the `ADB` constructor.
     * @returns The resulting class instance.
     */
    clone(opts = {}) {
        const originalOptions = lodash_1.default.cloneDeep(lodash_1.default.pick(this, Object.keys(exports.DEFAULT_OPTS)));
        const cloneOptions = lodash_1.default.defaultsDeep(opts, originalOptions);
        // Reset default arguments created in the constructor.
        // Without this code, -H and -P can be injected into defaultArgs multiple times.
        const defaultArgs = cloneOptions.executable.defaultArgs;
        if (cloneOptions.remoteAdbHost && defaultArgs.includes('-H')) {
            defaultArgs.splice(defaultArgs.indexOf('-H'), 2);
        }
        if (defaultArgs.includes('-P')) {
            defaultArgs.splice(defaultArgs.indexOf('-P'), 2);
        }
        return new ADB(cloneOptions);
    }
    static async createADB(opts = {}) {
        const adb = new ADB(opts);
        adb.sdkRoot = await (0, helpers_1.requireSdkRoot)(adb.sdkRoot);
        await adb.getAdbWithCorrectAdbPath();
        if (!opts?.suppressKillServer) {
            try {
                await adb.adbExec(['start-server']);
            }
            catch (e) {
                const err = e;
                logger_1.default.warn(err.stderr || err.message);
            }
        }
        return adb;
    }
}
exports.ADB = ADB;
//# sourceMappingURL=adb.js.map